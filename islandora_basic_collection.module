<?php

/**
 * @file
 * Provides functionality for creating/managing/deleting/viewing collections.
 */

// Constants.
define('ISLANDORA_BASIC_COLLECTION_CREATE_CHILD_COLLECTION', 'create child collection');
define('ISLANDORA_BASIC_COLLECTION_MANAGE_COLLECTION_POLICY', 'manage collection policy');
define('ISLANDORA_BASIC_COLLECTION_MIGRATE_COLLECTION_MEMBERS', 'migrate collection members');

// @codingStandardsIgnoreStart
// XXX: These should be removed at somepoint in the future.
define('CREATE_CHILD_COLLECTION', ISLANDORA_BASIC_COLLECTION_CREATE_CHILD_COLLECTION);
define('MANAGE_COLLECTION_POLICY', ISLANDORA_BASIC_COLLECTION_MANAGE_COLLECTION_POLICY);
define('MIGRATE_COLLECTION_MEMBERS', ISLANDORA_BASIC_COLLECTION_MIGRATE_COLLECTION_MEMBERS);
// @codingStandardsIgnoreEnd

/**
 * Implements hook_menu().
 */
function islandora_basic_collection_menu() {
  $ingest_object_menu_item = array(
    'title' => 'Add an object to this Collection',
    'page callback' => 'islandora_basic_collection_ingest_action',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/ingest.form.inc',
    'access callback' => 'islandora_basic_collection_ingest_access',
    'access arguments' => array(2),
  );
  return array(
    'admin/islandora/basic_collection' => array(
      'title' => 'Core Collection',
      'description' => 'Configure the core Islandora collection functionality.',
      'page callback' => 'drupal_get_form',
      'access arguments' => array('administer site configuration'),
      'page arguments' => array('islandora_basic_collection_admin'),
      'file' => 'includes/admin.form.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
    'islandora/object/%islandora_object/manage/collection' => array(
      'title' => 'Collection',
      'page callback' => 'islandora_basic_collection_manage_object',
      'page arguments' => array(2),
      'type' => MENU_LOCAL_TASK,
      'file' => 'includes/manage_collection.inc',
      'access callback' => 'islandora_basic_collection_manage_access',
      'access arguments' => array(2),
    ),
    'islandora/basic_collection/find_collections' => array(
      'title' => 'Autocomplete Collection Search',
      'page callback' => 'islandora_basic_collection_get_collections_filtered',
      'type' => MENU_CALLBACK,
      'file' => 'includes/utilities.inc',
      'access arguments' => array(ISLANDORA_BASIC_COLLECTION_MIGRATE_COLLECTION_MEMBERS),
    ),
    'islandora/object/%islandora_object/manage/object/share' => array(
      'title' => 'Share this Object with another collection',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_basic_collection_share_item_form', 2),
      'type' => MENU_LOCAL_ACTION,
      'file' => 'includes/share.form.inc',
      'access callback' => 'islandora_basic_collection_share_migrate_access',
      'access arguments' => array(2),
    ),
    'islandora/object/%islandora_object/manage/object/migrate' => array(
      'title' => 'Migrate this Object to another collection',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_basic_collection_migrate_item_form', 2),
      'type' => MENU_LOCAL_ACTION,
      'file' => 'includes/migrate.form.inc',
      'access callback' => 'islandora_basic_collection_share_migrate_access',
      'access arguments' => array(2),
    ),
    'islandora/object/%islandora_object/manage/collection/ingest' => $ingest_object_menu_item,
    'islandora/object/%islandora_object/manage/overview/ingest' => $ingest_object_menu_item,
  );
}

/**
 * Access callback for ingest.
 *
 * @param AbstractObject $object
 *   The object to test if we're allowed to ingest... Check that it actually
 *   is a collection and we have sufficient info to show the form.
 *
 * @return bool
 *   TRUE if $object represents a collection, we can show the ingest form and
 *   we have permission to ingest; otherwise, FALSE.
 */
function islandora_basic_collection_ingest_access(AbstractObject $object) {
  $collection_models = islandora_basic_collection_get_collection_content_models();
  $is_a_collection = (
    (count(array_intersect($collection_models, $object->models)) > 0) &&
    isset($object['COLLECTION_POLICY'])
  );

  if (!$is_a_collection) {
    return FALSE;
  }

  module_load_include('inc', 'islandora', 'includes/ingest.form');
  module_load_include('inc', 'islandora_basic_collection', 'includes/ingest.form');
  $configuration = islandora_basic_collection_get_ingest_configuration($object);
  $has_ingest_steps = islandora_ingest_can_display_ingest_form($configuration);

  return $has_ingest_steps && islandora_object_access(ISLANDORA_INGEST, $object);
}

/**
 * Access callback for share/migrate.
 *
 * @param AbstractObject $object
 *   The object to test if we're allowed to ingest... Check that it actually
 *   is a collection and we have sufficient info to show the form.
 *
 * @return bool
 *   TRUE if $object represents a collection, we can show the form and
 *   we have permission to manage object; otherwise, FALSE.
 */
function islandora_basic_collection_share_migrate_access(AbstractObject $object) {
  $collection_models = islandora_basic_collection_get_collection_content_models();
  $is_a_collection = (
    (count(array_intersect($collection_models, $object->models)) > 0) &&
    isset($object['COLLECTION_POLICY'])
  );

  if ($is_a_collection) {
    return FALSE;
  }
  return islandora_object_access(ISLANDORA_MANAGE_PROPERTIES, $object);
}

/**
 * Implements hook_menu_alter().
 */
function islandora_basic_collection_menu_alter(array &$items) {
  // We want to add more permissions to the access arguments for the manage tab.
  $current_access_arguments = $items['islandora/object/%islandora_object/manage']['access arguments'][0];
  $new_access_arguments = array(
    ISLANDORA_BASIC_COLLECTION_MANAGE_COLLECTION_POLICY,
    ISLANDORA_BASIC_COLLECTION_MIGRATE_COLLECTION_MEMBERS,
  );
  $new_access_arguments = array_merge($current_access_arguments, $new_access_arguments);
  $items['islandora/object/%islandora_object/manage']['access arguments'] = array($new_access_arguments, 2);
}

/**
 * Implements hook_islandora_required_objects().
 */
function islandora_basic_collection_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'islandora_basic_collection');
  // Collection Content Model.
  $collection_content_model = $connection->repository->constructObject('islandora:collectionCModel');
  $collection_content_model->owner = 'fedoraAdmin';
  $collection_content_model->label = 'Islandora Collection Content Model';
  $collection_content_model->models = 'fedora-system:ContentModel-3.0';
  // ISLANDORACM Datastream.
  $datastream = $collection_content_model->constructDatastream('ISLANDORACM', 'X');
  $datastream->label = 'Islandora content model';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_basic_collection_content_model.xml", FALSE);
  $collection_content_model->ingestDatastream($datastream);
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $collection_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_basic_collection_ds_composite_model.xml", FALSE);
  $collection_content_model->ingestDatastream($datastream);
  return array(
    'islandora_basic_collection' => array(
      'title' => 'Islandora basic collection',
      'objects' => array($collection_content_model),
    ),
  );
}

/**
 * Determine whether or not to show this modules manage tab.
 *
 * @param AbstractObject $object
 *   The object being managed.
 *
 * @return bool
 *   TRUE if it should be shown, and FALSE if it should not be shown.
 */
function islandora_basic_collection_manage_access($object = NULL) {
  $collection_models = islandora_basic_collection_get_collection_content_models();
  $is_a_collection = count(array_intersect($collection_models, $object->models)) > 0;

  return $is_a_collection && (
    islandora_object_access(ISLANDORA_BASIC_COLLECTION_MANAGE_COLLECTION_POLICY, $object) ||
    islandora_object_access(ISLANDORA_BASIC_COLLECTION_MIGRATE_COLLECTION_MEMBERS, $object) ||
    islandora_object_access(ISLANDORA_INGEST, $object) ||
    islandora_object_access(ISLANDORA_PURGE, $object)
  );
}

/**
 * Implements hook_theme().
 */
function islandora_basic_collection_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_basic_collection' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-basic-collection',
      'pattern' => 'islandora_basic_collection__',
      'variables' => array('islandora_object' => NULL),
    ),
    'islandora_basic_collection_grid' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-basic-collection-grid',
      'pattern' => 'islandora_basic_collection_grid__',
      'variables' => array('islandora_object' => NULL, 'collection_results' => NULL),
    ),
    'islandora_basic_collection_wrapper' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-basic-collection-wrapper',
      'variables' => array('islandora_object' => NULL),
    ),
    'islandora_basic_collection_policy_management_table' => array(
      'file' => 'theme/theme.inc',
      'render element' => 'table',
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_basic_collection_islandora_collectionCModel_islandora_view_object(AbstractObject $object) {
  $output = theme('islandora_basic_collection_wrapper', array('islandora_object' => $object));
  return array('Collection View' => $output);
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_basic_collection_islandora_collectionCModel_islandora_overview_object(AbstractObject $object) {
  $rows = array();
  $model_query = islandora_basic_collection_get_query_info(array(
    'object' => $object,
    'page_size' => -1,
    'page_number' => 0,
    'vars' => '?model',
    'order_by' => FALSE,
  ));
  $models = (array) $object->repository->ri->query($model_query['query'], $model_query['type']);
  $ignore_models = array(
    'fedora-system:FedoraObject-3.0',
  );
  foreach ($models as $model) {
    $model_pid = $model['model']['value'];
    if (in_array($model_pid, $ignore_models)) {
      continue;
    }
    $model_count_query = islandora_basic_collection_get_query_info(array(
      'object' => $object,
      'page_size' => -1,
      'page_number' => 0,
      'order_by' => FALSE,
      'model' => "<info:fedora/$model_pid>",
    ));
    $model_object = islandora_object_load($model_pid);
    if (variable_get('islandora_basic_collection_disable_count_object', FALSE)) {
      $rows[$model_pid] = array(
        ($model_object ?
            l($model_object->label, "islandora/object/{$model_object->id}") :
            $model_pid),
      );
    }
    else {
      $rows[$model_pid] = array(
        ($model_object ?
            l($model_object->label, "islandora/object/{$model_object->id}") :
            $model_pid),
        $object->repository->ri->countQuery($model_count_query['query'], $model_count_query['type']),
      );
    }
  }

  list($total_count, $all_results) = islandora_basic_collection_get_member_objects($object, 0, 0);

  $content = array(
    'total' => array('#markup' => t('Total members: %total', array('%total' => $total_count))),
    'table' => array(
      '#theme' => 'table',
      '#header' => array(
        'type' => array('data' => t('Type')),
        'count' => array('data' => t('Count')),
      ),
      '#rows' => $rows,
      '#empty' => t('Collection is empty.')),
  );
  if (variable_get('islandora_basic_collection_disable_count_object', FALSE)) {
    unset($content['total']);
    unset($content['table']['#header']['count']);
  }
  return array(
    'collection' => drupal_render($content),
  );
}

/**
 * Implements hook_islandora_view_object().
 */
function islandora_basic_collection_islandora_overview_object(AbstractObject $object) {
  module_load_include('inc', 'islandora_basic_collection', 'includes/utilities');
  if (!in_array('islandora:collectionCModel', $object->models)) {
    $map_to_row = function($o) {
      $o = islandora_object_load($o);
      return array(l($o->label, "islandora/object/{$o->id}"));
    };
    $pids = islandora_basic_collection_get_parent_pids($object);
    $rows = array_map($map_to_row, $pids);
    $table = theme('table', array(
               'header' => array(t('Parent Collections')),
               'rows' => $rows,
               'empty' => t('No parent collections')));
    return array('collection' => $table);
  }
}

/**
 * Get the query to get child objects.
 *
 * @param array $params
 *   An array containing all the parameters, at least:
 *   - object: An AbstractObject we're querying for.
 *   but may also contain:
 *   - page_size: The size of the page/number of results to return. Defaults to
 *     10.
 *   - page_number: An integer representing the offset as a multiple of
 *     page_size. Defaults to 0.
 *   - vars: A string containing the list of variables to select. Defaults to
 *     "?object ?title".
 *   - order_by: A string indicating which variable by which to sort. Defaults
 *     to "?title". May be set to FALSE to avoid sorting.
 *   - model: A string representing a URI. Defaults to "?model". Could be
 *     provided as "<info:fedora/cmodel:pid>" if the type of object to query
 *     should be filtered.
 * @param string $type
 *   Either 'view' or 'manage', its meant to repersent how the objects will be
 *   used.
 *
 * @return array
 *   An array containing a number of keys used to describe the query,
 *   including all the values from $params (which haven't been unset in the
 *   alter), in addition to:
 *   - query: The actual query string.
 *   - type: A string containing the type of query, likely one of:
 *     - itql; or,
 *     - sparql.
 *   - pid: The pid of the collection being queried.
 */
function islandora_basic_collection_get_query_info(array $params, $type = 'view') {
  if (!isset($params['object'])) {
    throw new Exception(t('!function requires "!object_parameter" to be given in the array of parameters.', array(
      '!function' => __FUNCTION__,
      '!object_parameter' => 'object',
    )));
  }

  // Add in defaults.
  $params += array(
    'page_number' => 0,
    'page_size' => 1000,
    'vars' => '?object ?title ?owner ?date_modified',
    'order_by' => '?title',
    'model' => '?model',
  );

  $object = $params['object'];

  $query = <<<EOQ
SELECT DISTINCT !vars
FROM <#ri>
WHERE {
  !statements .
  !optionals
  !filters
}
EOQ;

  $filters = array();
  $query_filters = module_invoke_all('islandora_basic_collection_get_query_filters', $type);
  $query_optionals = module_invoke_all('islandora_basic_collection_get_query_optionals', $type);
  $query_statements = module_invoke_all('islandora_basic_collection_get_query_statements', $type);
  drupal_alter('islandora_basic_collection_query_param', $query_filters, $query_statements, $params, $query_optionals);

  foreach ($query_filters as $filter) {
    $filters[] = "FILTER($filter)";
  }
  $query = format_string($query, array(
    '!statements' => implode(' . ', $query_statements),
    '!optionals' => (!empty($query_optionals) ? ('OPTIONAL {{' . implode('} UNION {', $query_optionals) . '}}') : ''),
    '!filters' => implode(' ', $filters),
    '!vars' => $params['vars'],
  ));

  $query = format_string($query, array(
    '!pid' => $object->id,
    '!model' => $params['model'],
  ));

  if ($params['order_by']) {
    $query .= <<<EOQO
ORDER BY {$params['order_by']}
EOQO;
  }

  $query_array = $params + array(
    'query' => $query,
    'type' => 'sparql',
    'pid' => $object->id,
  );
  drupal_alter('islandora_basic_collection_query', $query_array);
  return $query_array;
}

/**
 * Implements hook_islandora_basic_collection_get_query_statements().
 */
function islandora_basic_collection_islandora_basic_collection_get_query_statements($type = 'view') {
  $to_return = array();
  $to_return[] = <<<EOQ
?object ?collection_predicate <info:fedora/!pid> ;
        <fedora-model:label> ?title ;
        <fedora-model:ownerId> ?owner ;
        <fedora-view:lastModifiedDate> ?date_modified ;
        <fedora-model:hasModel> !model
EOQ;

  if ($type == 'view') {
    $to_return[] = '?object <fedora-model:state> <fedora-model:Active>';
  }
  return $to_return;
}

/**
 * Implements hook_islandora_basic_collection_get_query_filters().
 */
function islandora_basic_collection_islandora_basic_collection_get_query_filters($type) {
  return 'sameTerm(?collection_predicate, <fedora-rels-ext:isMemberOfCollection>) || sameTerm(?collection_predicate, <fedora-rels-ext:isMemberOf>)';
}

/**
 * Get objects associated with this object.
 *
 * Currently, we are only concerned with the with isMemberOf and
 * isMemberOfCollection relationships.
 *
 * @param AbstractObject $object
 *   The collection object whose members will be fetched.
 * @param int $page_number
 *   The page number in the query for members.
 * @param int $page_size
 *   The number of results per page page from the query for members.
 * @param string $type
 *   Either 'view' or 'manage', its meant to repersent how the objects will be
 *   used.
 * @param string $cmodel
 *   The content model in which to explicitly select.
 *
 * @return array|bool
 *   An array containing two values:
 *   - An integer representing the total number of tuples which can be
 *     selected with the given parameters.
 *   - The tuples in the slice according to $page_number and $page_size.
 *   or boolean FALSE if the query fails.
 */
function islandora_basic_collection_get_member_objects(AbstractObject $object, $page_number = 0, $page_size = 20, $type = 'view', $cmodel = NULL) {
  $params = array(
    'object' => $object,
    'page_number' => $page_number,
    'page_size' => $page_size,
  );

  if (isset($cmodel)) {
    $params['model'] = "<info:fedora/$cmodel>";
  }
  $query_array = islandora_basic_collection_get_query_info($params, $type);
  try {
    $count = variable_get('islandora_basic_collection_disable_count_object', FALSE) ? 0 : $object->repository->ri->countQuery($query_array['query'], $query_array['type']);
    $is_itql = strcasecmp('itql', $query_array['type']) === 0;

    if ($is_itql && ($page_number > 0 || $page_size >= 0)) {
      // Strip the final semi-colon(s) of any itql query, where they exist.
      $query = trim($query_array['query']);
      while (strpos($query, -1) == ';') {
        $query = substr($query, 0, -1);
      }
      $query_array['query'] = $query;
    }

    if ($page_number > 0 && $page_size > 0) {
      // Add in the offset somehow.
      $offset = $page_number * $page_size;
      $query_array['query'] .= " offset $offset";
    }
    if ($page_size >= 0) {
      // Add in the limit somehow.
      $query_array['query'] .= " limit $page_size";
    }

    if ($is_itql) {
      // Add in the final semi-colon.
      $query_array['query'] .= ';';
    }

    $results = $object->repository->ri->query($query_array['query'], $query_array['type']);
  }
  catch (Exception $e) {
    $variables = array(
      '@message' => $e->getMessage(),
      '@stack' => $e->getTraceAsString(),
    );
    watchdog('islandora_basic_collection',
     'Islandora basic collection failed to retrieve associated objects.<br/>Error:<br/>@message<br/>Stack: <br/>@stack',
      $variables,
      WATCHDOG_ERROR);
    return FALSE;
  }
  return array($count, $results);
}

/**
 * Get objects associated with this object.
 *
 * Currently, we are only concerned with the with isMemberOf and
 * isMemberOfCollection relationships.
 *
 * @deprecated
 *   Deprecated in favour of islandora_basic_collection_get_member_objects(),
 *   which should actually be able to page through results.
 *
 * @param AbstractObject $object
 *   The collection object whose members will be fetched.
 * @param int $page_number
 *   The page number in the query for members.
 * @param int $page_size
 *   The number of results per page page from the query for members.
 *
 * @return array|string
 *   The array of query results as provided by
 *   RepositoryQuery::parseSparqlResults().
 */
function islandora_basic_collection_get_objects(AbstractObject $object, $page_number = 0, $page_size = -1) {
  module_load_include('inc', 'islandora', 'includes/utilities');
  $message = islandora_deprecated('7.x-1.2', 'Use islandora_basic_collection_get_member_objects() to page and avoid potential memory issues with large collections.');
  trigger_error(filter_xss($message), E_USER_DEPRECATED);

  $new_results = islandora_basic_collection_get_member_objects($object, $page_number, $page_size);
  if ($new_results) {
    return $new_results[1];
  }
  else {
    drupal_set_message(t('Error getting related objects for %s', array('%s' => $object->id)), 'error');
    return '';
  }
}

/**
 * Get all existing collections.
 *
 * @return array
 *   An associative array containing all the known collections:
 *   - pid: The PID of the collection.
 *   - pid: The PID of the collection.
 *   - label: The label of the collection.
 */
function islandora_basic_collection_get_collections() {
  module_load_include('inc', 'islandora', 'includes/utilities');
  $tuque = islandora_get_tuque_connection();
  $query = 'select $object $label from <#ri> where (
            $object <info:fedora/fedora-system:def/model#hasModel> <info:fedora/islandora:collectionCModel> and
            $object <fedora-model:label> $label and
            $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>)
            order by $label';
  $results = $tuque->repository->ri->itqlQuery($query, 'unlimited');
  $collections = array();
  foreach ($results as $result) {
    $pid = $result['object']['value'];
    if (islandora_namespace_accessible($pid)) {
      $collections[$pid] = array(
        'pid' => $pid,
        'label' => $result['label']['value'],
      );
    }
  }
  return $collections;
}

/**
 * Implements hook_islandora_undeletable_datastreams().
 */
function islandora_basic_collection_islandora_undeletable_datastreams($models) {
  if (in_array('islandora:collectionCModel', $models)) {
    if (variable_get('islandora_basic_collection_disable_collection_policy_delete', TRUE)) {
      return array('COLLECTION_POLICY');
    }
  }
}

/**
 * Implements hook_permission().
 */
function islandora_basic_collection_permission() {
  return array(
    ISLANDORA_BASIC_COLLECTION_CREATE_CHILD_COLLECTION => array(
      'title' => t('Create child collections'),
      'description' => t('Create new collections within an existing collection.'),
    ),
    ISLANDORA_BASIC_COLLECTION_MANAGE_COLLECTION_POLICY => array(
      'title' => t('Manage collection policies'),
      'description' => t('Define which content models are available for each collection.'),
    ),
    ISLANDORA_BASIC_COLLECTION_MIGRATE_COLLECTION_MEMBERS => array(
      'title' => t('Migrate collection members'),
      'description' => t('Move objects from one collection to another.'),
    ),
  );
}

/**
 * Implements hook_form_islandora_object_properties_form_alter().
 */
function islandora_basic_collection_form_islandora_object_properties_form_alter(array &$form, array &$form_state) {
  $object = $form_state['object'];
  if (in_array('islandora:collectionCModel', $object->models)) {
    $form['delete']['#value'] = t('Delete Collection');
  }
}

/**
 * Implements hook_form_islandora_object_properties_form_alter().
 */
function islandora_basic_collection_form_islandora_delete_object_form_alter(array &$form, array &$form_state) {
  $object = $form_state['object'];
  if (in_array('islandora:collectionCModel', $object->models)) {
    $form['description']['#markup'] = t('This will remove the collection object and all its child objects. Child objects currently shared with other collections will not be deleted. This action cannot be undone.');
    $form['#submit'] = array('islandora_basic_collection_islandora_delete_object_form_delete_children_submit');
  }
}

/**
 * Delete all the child objects related to the collection object being deleted.
 *
 * @param array $form
 *   The Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 */
function islandora_basic_collection_islandora_delete_object_form_delete_children_submit(array $form, array &$form_state) {
  module_load_include('inc', 'islandora_basic_collection', 'includes/batch');
  // @todo This should be recursive.
  batch_set(islandora_basic_collection_delete_children_batch($form_state['object']));
  // Called from within this submit handler rather than from the Drupal Form API
  // as we need the object to exist to generate the pages and if we run this.
  // batch operation from a submit handler any submit handlers to be called
  // afterwards will not get called, which is a bug/feature of the Form API.
  islandora_delete_object_form_submit($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters islandora_repository_admin form.
 * Adds in a setting for site-wide UUID generation on ingest.
 */
function islandora_basic_collection_form_islandora_repository_admin_alter(&$form, &$form_state) {
  $form['islandora_tabs']['islandora_general']['islandora_basic_collection_generate_uuid'] = array(
    '#type' => 'checkbox',
    '#title' => t('UUID PID Generation'),
    '#default_value' => variable_get('islandora_basic_collection_generate_uuid', FALSE),
    '#description' => t('Generate Fedora object PIDs with v4 UUIDs.'),
  );
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function islandora_basic_collection_islandora_ingest_steps(array &$form_state) {
  // Assumes that only a single object will get created.
  $shared_storage = islandora_ingest_form_get_shared_storage($form_state);
  // Not ingesting into a collection.
  if (empty($shared_storage['collection'])) {
    return;
  }
  // Configure the step storage.
  $step_storage = &islandora_ingest_form_get_step_storage($form_state, 'islandora_basic_collection_select_content_model');
  $step_storage['models'] = isset($step_storage['models']) ? $step_storage['models'] : $shared_storage['models'];
  if (count($step_storage['models']) > 0) {
    return array(
      'islandora_basic_collection_select_content_model' => array(
        'type' => 'form',
        'form_id' => 'islandora_basic_collection_select_content_model_form',
        'args' => array($step_storage['models']),
        'weight' => -50,
        'module' => 'islandora_basic_collection',
        'file' => 'includes/ingest.form.inc',
      ),
    );
  }
}

/**
 * Implements hook_islandora_ingest_steps_alter().
 */
function islandora_basic_collection_islandora_ingest_steps_alter(array &$steps, array $form_state) {
  $step_storage = &islandora_ingest_form_get_step_storage($form_state, 'islandora_basic_collection_select_content_model');
  if (!empty($step_storage)) {
    // Convert the select content model form step to a callback when only one
    // content model is available and when there are more than one form steps,
    // as we can't have a form with no steps.
    $select_model_form_step = !empty($steps['islandora_basic_collection_select_content_model']);
    $no_model_selection = count($step_storage['models']) == 1;
    $form_steps = islandora_ingest_form_get_form_steps($form_state);
    if ($select_model_form_step && $no_model_selection && count($form_steps) > 1) {
      $steps['islandora_basic_collection_select_content_model'] = array(
        'type' => 'callback',
        'do_function' => array(
          'function' => 'islandora_basic_collection_set_content_model_callback',
          'args' => array(
            reset($step_storage['models']),
          ),
        ),
        'undo_function' => array('function' => 'islandora_basic_collection_set_content_model_undo_callback'),
        'weight' => -50,
        'module' => 'islandora_basic_collection',
        'file' => 'includes/ingest.form.inc',
      );
    }
  }
}

/**
 * Get the content models which can should be treated as collections.
 *
 * @return array
 *   An array of strings, each of which represents the PID of a content model.
 */
function islandora_basic_collection_get_collection_content_models() {
  return array(
    'islandora:collectionCModel',
  );
}

/**
 * Implements hook_islandora_object_access().
 *
 * Maps our three permissions onto those in the Islandora core.
 */
function islandora_basic_collection_islandora_object_access($op, $object, $user) {
  $result = NULL;

  $collection_models = islandora_basic_collection_get_collection_content_models();
  $is_a_collection = (
    (count(array_intersect($collection_models, $object->models)) > 0) &&
    isset($object['COLLECTION_POLICY'])
  );

  if (in_array($op, array_keys(islandora_basic_collection_permission()))) {
    if ($is_a_collection) {
      if ($op == ISLANDORA_BASIC_COLLECTION_CREATE_CHILD_COLLECTION) {
        $result = islandora_object_access(ISLANDORA_INGEST, $object, $user) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $object['COLLECTION_POLICY'], $user);
        if ($result) {
          $policy = new CollectionPolicy($object['COLLECTION_POLICY']->content);
          $policy_content_models = $policy->getContentModels();
          $result = count(array_intersect($collection_models, array_keys($policy_content_models))) > 0;
        }
      }
      elseif ($op == ISLANDORA_BASIC_COLLECTION_MANAGE_COLLECTION_POLICY) {
        $result = islandora_datastream_access(ISLANDORA_METADATA_EDIT, $object['COLLECTION_POLICY'], $user);
      }
      elseif ($op == ISLANDORA_BASIC_COLLECTION_MIGRATE_COLLECTION_MEMBERS) {
        // Not sure how much sense this makes... Check that we can modify the
        // RELS-EXT of the current object, assuming that we'll be able to modify
        // the children as well...
        $result = islandora_datastream_access(ISLANDORA_METADATA_EDIT, $object['RELS-EXT'], $user);
      }
    }
    else {
      $result = FALSE;
    }
  }

  return $result;
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function islandora_basic_collection_islandora_collectioncmodel_islandora_ingest_steps() {
  return array(
    'islandora_basic_collection' => array(
      'weight' => -11,
      'type' => 'form',
      'form_id' => 'islandora_basic_collection_create_child_collection_form',
      'module' => 'islandora_basic_collection',
      'file' => 'includes/manage_collection.inc',
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_object_ingested().
 */
function islandora_basic_collection_islandora_collectioncmodel_islandora_object_ingested(AbstractObject $fedora_object) {

  // Add TN datastream.
  $thumbnail_datastream = $fedora_object->constructDatastream('TN');
  $thumbnail_datastream->setContentFromFile(drupal_get_path('module', 'islandora_basic_collection') . '/images/folder.png', FALSE);
  $thumbnail_datastream->label = 'Thumbnail';
  $thumbnail_datastream->mimetype = 'image/png';
  $fedora_object->ingestDatastream($thumbnail_datastream);
}
